'''
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной платы сотрудника.
Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во время выполнения расчёта для конкретных
значений необходимо запускать скрипт с параметрами.
'''
print('Задание 1')
print(' ')

def sal():
    try:
        time = float(input('Выработка в часах '))
        salary = int(input('Ставка в у.е. '))
        bonus = int(input('Премия в у.е. '))
        res = time * salary + bonus
        print(f'заработная плата сотрудника  {res}')
    except ValueError:
        return print('Not a number')
sal()


# 1.2

import argv from sys

name, time, salary, bonus = argv
try:
    time = int(time)
    salary = int(salary)
    bonus = int(bonus)
    res = time * salary + bonus
    print(f'заработная плата сотрудника  {res}')
except ValueError:
    print('Not a number')

print('*'*40)
'''
2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
'''
print('Задание 2')
print(' ')

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
print(my_list)

new_list = [el for i, el in enumerate(my_list) if i > 0 and my_list[i] > my_list[i - 1]]

print(new_list)

print('*'*40)
'''
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
Подсказка: используйте функцию range() и генератор.
'''
print('Задание 3')
print(' ')

print([el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0])

print('*'*40)
'''
4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел,
соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания
обязательно используйте генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
'''
print('Задание 4')
print(' ')

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print(my_list)
print([el for el in my_list if my_list.count(el) < 2])

print('*'*40)
'''
5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные
числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
'''
print('Задание 5')
print(' ')

from functools import reduce

def my_func(prev_el, el):
    return prev_el * el

my_list = [el for el in range(100, 1001, 2)]
print(my_list)
print(reduce(my_func, my_list))

print('*'*40)
'''
6. Реализовать два небольших скрипта:
итератор, генерирующий целые числа, начиная с указанного;
итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и
cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие
его завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем
цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.
'''
print('Задание 6')
print(' ')

from itertools import count

for el in count(int(input('Введите стартовое число '))):
    print(el)

from itertools import cycle

my_list = [True, 'ABC', 123, None]
for el in cycle(my_list):
    print(el)

print('*'*40)
'''
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции
должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение
факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
'''
print('Задание 7')
print(' ')

from itertools import count
from math import factorial

def fibonachy_gen():
    for el in count(1):
        yield factorial(el)

gen = fibonachy_gen()
x = 0
for i in gen:
    if x < 15:
        print(i)
        x += 1
    else:
        break 

print('*'*40)
